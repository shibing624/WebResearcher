# -*- coding: utf-8 -*-
"""
@author:XuMing(xuming624@qq.com)
@description: Main entry point for WebResearcher agent

Supports two modes:
1. Single Agent (default): Fast, cost-effective, suitable for most scenarios
2. TTS (Test-Time Scaling): 3-5x cost, higher accuracy, for critical scenarios
"""
import argparse
import asyncio
import json
from loguru import logger
from dotenv import load_dotenv

load_dotenv('.env', override=True)


async def main(args):
    # 1. ÂÆö‰πâ LLM ÈÖçÁΩÆ
    llm_config = {
        "model": args.model,
        "generate_cfg": {
            'max_input_tokens': args.max_input_tokens,
            "temperature": args.temperature,
            "top_p": args.top_p,
            "presence_penalty": args.presence_penalty,
            "model_thinking_type": args.model_thinking_type,
        }
    }

    # 2. ÈÄâÊã©‰ª£ÁêÜÊ®°Âºè
    if args.use_tts:
        logger.warning("=" * 80)
        logger.warning("‚ö†Ô∏è  Test-Time Scaling (TTS) Mode Enabled")
        logger.warning(f"   Cost: ~{args.num_parallel_agents + 0.5:.1f}x of single-agent baseline")
        logger.warning(f"   Running {args.num_parallel_agents} parallel agents")
        logger.warning("   Use this ONLY for high-value scenarios!")
        logger.warning("=" * 80)
        
        from webresearcher.tts_agent import TestTimeScalingAgent
        agent = TestTimeScalingAgent(
            llm_config=llm_config,
            function_list=args.function_list,
        )
        use_tts_mode = True
    else:
        logger.info("‚úÖ Using single-agent mode (cost-effective)")
        from webresearcher.agent import WebResearcherAgent
        agent = WebResearcherAgent(
            llm_config=llm_config,
            function_list=args.function_list,
        )
        use_tts_mode = False

    # 3. ÂáÜÂ§áËæìÂÖ•Êï∞ÊçÆ (‰∏éÂéüÂßãÁöÑ `run` Ê†ºÂºè‰∏ÄËá¥)
    input_data = [
        {
            "question": "ÂàòÁøîÁ†¥Á∫™ÂΩïÊó∂ÂÄôÊòØÂ§öÂ∞ëÂ≤Å?",
            "answer": "23Â≤ÅÂ∑Æ2Â§©"},
        {
            "question": "20‰∏ñÁ∫™‰∫åÂçÅÂπ¥‰ª£‰∏≠Âú®‰∏äÊµ∑ÊàêÁ´ãÁöÑÂàäÁâ©Êàê‰∏∫‰∫ÜÊàëÂõΩÁü•ÂêçÂ≠¶ÁîüËøêÂä®ÁöÑÂÖàÂØºÔºåÂú®Ê≠§Ê¨°ËøêÂä®‰∏≠Âç†ÊçÆÈ¢ÜÂØºÂú∞‰ΩçÁöÑÈ´òÊ†°Âú®ËøëÁôæÂπ¥ÂêéÊúâ‰∏ÄÂêçÂú®21‰∏ñÁ∫™ÂàùÊüêÂ∞ëÂÑøÁîµËßÜÂâß‰∏≠ÊâÆÊºîÈáçË¶ÅËßíËâ≤ÁöÑÊºîÂëòÂÖ•Â≠¶ÔºåÈÇ£‰πàËØ∑ÈóÆÂú®Ê≠§ÁîµËßÜÂâß‰∏≠ÁöÑÁî∑‰∏ÄÂè∑ÊòØ‰ªÄ‰πàÊó∂Èó¥ÁªìÂ©ö",
            "answer": "2019Âπ¥4Êúà23Êó•"},
        {
            "question": "ËØ∑Ê†πÊçÆ‰ª•‰∏ãÁ∫øÁ¥¢ÊâæÂá∫Ëøô‰ΩçËâ∫ÊúØÂÆ∂ÁöÑÂßìÂêçÔºöÊõæÂú®‰∏≠ÂõΩ‰∏≠Â§ÆÁæéÊúØÂ≠¶Èô¢ÂèäÂæ∑ÂõΩÊùúÂ°ûÂ∞îÂ§öÂ§´Ëâ∫ÊúØÂ≠¶Èô¢Ê∑±ÈÄ†ÔºåÂπ∂Ëµ¥Âæ∑ÂõΩÁïôÂ≠¶„ÄÇÂú®Âæ∑ÂõΩÂ≠¶‰π†ÊúüÈó¥Ôºå‰ªñÂ∏à‰ªé‰∏â‰ΩçÁü•ÂêçËâ∫ÊúØÂÆ∂ÔºåÂÖ∂‰∏≠‰∏Ä‰ΩçËâ∫ÊúØÂÆ∂ÁöÑ‰ΩúÂìÅÊõæÂú®2012Âπ¥Âàõ‰∏ãÂú®‰∏ñËâ∫ÊúØÂÆ∂ÊãçÂçñÁöÑÊúÄÈ´ò‰ª∑Á∫™ÂΩï",
            "answer": "ËãèÁ¨ëÊüè"},
        {
            "question": "‰∏Ä‰ΩçÁîªÂÆ∂ÔºåÁà∂‰∫≤ÂøÉËÑèÁóÖÂéª‰∏ñÔºåÊúâ‰∏Ä‰∏™ÂßêÂßêÔºå‰∏éÂ¶ªÂ≠êËÇ≤Êúâ‰∫î‰∏™Â≠êÂ•≥ÔºåÂêéÂ©öÂßªÁ†¥Ë£ÇÔºåÂêéÁªèÂéÜ‰∏âÊÆµÊÑüÊÉÖÂè≤„ÄÇÂêéÊúâ‰∏ÄÈÉ®ÊñáÂ≠¶‰ΩúÂìÅÂü∫‰∫éÊ≠§‰∫∫Êí∞ÂÜôÔºåËøôÈÉ®‰ΩúÂìÅÂè´‰ªÄ‰πàÔºü",
            "answer": "‰øùÁΩó.È´òÊõ¥"},
        {
            "question": "Êúâ‰∏ÄÈÉ®2010-2019Âπ¥‰∏äÊò†ÁöÑÁîµËßÜÂâßaÔºåÂÆÉÁöÑ‰∏Ä‰ΩçÈÖçËßíÂú®2025Âπ¥Êò•ÈÄù‰∏ñÔºåËøôÂêçÈÖçËßíÂú®Ââß‰∏≠ÁöÑËßíËâ≤ÊòØ‰∏Ä‰ΩçÊØç‰∫≤Âπ∂‰∏îÂ∏ÆÂä©‰∏ªËßíÊ¥óÊ∏ÖÂÜ§Â±à„ÄÇÂâßaÁî∑‰∏ªÊºîxÊõæÂú®2010Âπ¥ÂâçÂêéÂá∫Êºî‰∏ÄÈÉ®‰∏≠ÂõΩÁü•ÂêçÂè§Ë£ÖÂâßÔºåÈ•∞ÊºîÈáçË¶ÅËßíËâ≤ÔºåËøô‰∏™ËßíËâ≤‰∏∫Êüê‰∏ÄÊîøÊùÉÁöÑÂª∫Á´ãÂëïÂøÉÊ≤•Ë°ÄÔºå‰πü‰∏∫Âêé‰∫∫ÊâÄËµûÈ¢Ç„ÄÇËØ∑ÈóÆËØ•Áî∑‰∏ªÊºîxÁöÑÂ¶ªÂ≠êÔºàÂêå‰∏∫ÊºîÂëòÔºâÁöÑÂÆ∂‰π°ÊúÄÁü•ÂêçÁöÑÂ§ßÂ≠¶ÁöÑÊ†°ËÆ≠Ôºü",
            "answer": "ËßÑÊ†º‰∏•Ê†ºÔºåÂäüÂ§´Âà∞ÂÆ∂"},
        {
            "question": "Êüê‰∏ÄÊîπÁºñËá™Â∞èËØ¥ÁöÑÁü•ÂêçÁîµËßÜÂâßaÔºåÊõæÊøÄËµ∑ÂæàÂ§ßÂèçÂìç„ÄÇËøôÈÉ®ÁîµËßÜÂâß‰∏äÊò†‰∫é21‰∏ñÁ∫™ÁöÑÂâç10Âπ¥Ôºå‰∏∫Ë±ÜÁì£È´òÂàÜÂâß„ÄÇÂ•≥‰∏ªÊºîÊõæÂú®2010-2019Âπ¥Âá∫ÊºîÊüêÈÉ®ÊäóÊàòÂâßbÔºåÂâßbÁöÑÂâßÂêç‰∏≠Â∏¶ÊúâÂ•πÁöÑÂá∫ÁîüÂú∞„ÄÇËØ∑ÈóÆÂâßaÁî∑‰∏ªÊºîÁöÑÁ•ñÁ±çÊòØÂì™Èáå",
            "answer": "ÂÆÅÊ≥¢Â•âÂåñ"},
        {
            "question": "Êúâ‰∏ÄËëóÂêçËØóËØç‰∫∫Ôºå‰ªñÂèÇÂä†Áßë‰∏æËÄÉËØïÊó∂Ë¢´‰∏ªËÄÉÂÆòÂíåÂ∞èËØïÂÆòËµèËØÜ‰∏îÂ∞èËØïÂÆòÁöÑÂßìÊòØËä±ÁöÑÂêçÂ≠ó„ÄÇ‰ªñÁöÑÂá∫ÁîüÂú∞aÁöÑÂçóÈÉ®ÊØóÈÇªÂüéÂ∏ÇbÂú®ÂΩìÂâçËØûÁîü‰∫Ü‰∏Ä‰ΩçÈ°∂ÊµÅÁî∑ÊòéÊòü„ÄÇËØ•Áî∑ÊòüÂú®2022Âπ¥Âõ†‰∏∫‰∏ÄÈÉ®ÁîµËßÜÂâßÂ§ßÁÅ´ÔºåÂπ∂‰∏î‰ªñÁîü‰∫éÂπ¥Êú´„ÄÇÊ±ÇÈóÆËØ•Áî∑ÊòüÂ§ßÂ≠¶ÊØï‰∏öÈô¢Ê†°ÊàêÁ´ã‰∫éÂì™‰∏ÄÂπ¥",
            "answer": "2004"},
        {
            "question": "Êüê‰∏ÄÂ∞èËØ¥ÂÆ∂ÔºåÊõæËé∑Áü•ÂêçÊñáÂ≠¶Â•ñÈ°π„ÄÇ‰ªñÁöÑÂá∫ÁîüÂú∞ÂíåÊàêÈïøÂú∞‰∏çÂú®‰∏Ä‰∏™ÂõΩÂÆ∂„ÄÇ‰ªñÂá∫ÁîüÁöÑÈÇ£Â§©ÁöÑ50‰ΩôÂπ¥ÂâçÔºåÊñ∞‰∏≠ÂõΩ‰∏Ä‰ΩçÂá∫Ëâ≤ÁöÑÂÜõ‰∫ãÂ∞ÜÈ¢ÜÂá∫ÁîüÔºàÂç≥‰ªñ‰ª¨ÂêåÊúàÂêåÊó•ÁîüÔºâ„ÄÇËØ•Â∞ÜÂÜõÁöÑÁ¨¨Âõõ‰ªªÂ§´‰∫∫ÂíåËØ•Â∞ÜÂÜõÁöÑÁªìÂ©öÊó•ÊúüÊòØÂú®Âì™‰∏ÄÂπ¥ÁöÑÂì™‰∏ÄÊúàÔºü",
            "answer": "1946.5"},
        {
            "question": "Êüê 90 Âêé‰∏≠ÂõΩÁî∑Ê≠åÊâãÔºå 2014 Âπ¥Âú®ÊüêÊ°£ËäÇÁõÆ‰∏≠ÁøªÂî±‰∫Ü‰∏ÄÈ¶ñÂèëË°®‰∫é 1979 Âπ¥ÁöÑÊ≠åÊõ≤ÔºåÂπ∂‰∫é2025 Âπ¥Ë∑®Âπ¥Êôö‰ºö‰∏äÂÜçÊ¨°‰∏éÂéüÂî±ÂêåÂè∞ÊºîÂî±Ëøô‰∏ÄÈ¶ñÊ≠å„ÄÇËøôÈ¶ñÊ≠åÁöÑÂêçÂ≠óÊòØ‰ªÄ‰πàÔºü",
            "answer": "Ê¨¢È¢ú"},
        {
            "question": "‰∏Ä‰ΩçÂá∫Áîü‰∫é‰∏ä‰∏ñÁ∫™ 80 Âπ¥‰ª£ÔºåÊØï‰∏ö‰∫éÂåó‰∫¨ËëóÂêçÈü≥‰πêÈô¢Ê†°ÁöÑÈü≥‰πê‰∫∫Ôºå‰∏ç‰ªÖ‰ºöÂºπÈí¢Áê¥ÔºåËÄå‰∏îËøò‰ºöÂêπÂ∞èÂè∑ÔºåÊúâËá™Â∑±ÁöÑÈü≥‰πêÂ∑•‰ΩúÂÆ§ÔºåÊõæÂâçÂæÄÁæéÂõΩÂ≠¶‰π†ÂÖàËøõÁöÑÈü≥‰πêÂà∂‰ΩúÊñπÊ≥ïÂíåÁêÜÂøµ„ÄÇ‰∏éÊüê‰ª•Â£∞Èü≥Á©∫ÁÅµÊÇ†ËøúËÄåËëóÁß∞ÁöÑÁî∑Ê≠åÊâãÊúâËøáÊ∑±ÂÖ•ÁöÑÂêà‰ΩúÔºåËøòÊõæÊãÖ‰ªªÂ§ö‰∏™Èü≥‰πêÁ±ªÁªºËâ∫ÁöÑÈü≥‰πêÊÄªÁõë„ÄÇËøô‰ΩçÈü≥‰πê‰∫∫ 2025 Âπ¥ÂèëÂ∏ÉÁöÑ‰∏ìËæëÂêçÂ≠óÊòØ‰ªÄ‰πàÔºü",
            "answer": "1981"},
    ]

    # 4. ËøêË°åÁ†îÁ©∂‰ªªÂä°
    test_case = input_data[:args.test_case_limit] if args.test_case_limit > 0 else input_data
    
    for idx, item in enumerate(test_case, 1):
        question = item['question']
        ground_truth = item['answer']
        
        logger.info(f"\n{'='*80}")
        logger.info(f"üìù Question {idx}/{len(test_case)}: {question[:100]}...")
        logger.info(f"{'='*80}")

        # Run agent (TTS or single)
        if use_tts_mode:
            final_result = await agent.run(
                question=question,
                ground_truth=ground_truth,
                num_parallel_agents=args.num_parallel_agents
            )
        else:
            final_result = await agent.run(question)

        # 5. ÊâìÂç∞ÁªìÊûú
        print("\n" + "="*80)
        print("üìä RESULTS")
        print("="*80)
        print(f"Q: {final_result['question']}")
        print(f"Ground Truth: {ground_truth}")
        
        if use_tts_mode:
            print(f"Final Answer (TTS): {final_result['final_synthesized_answer']}")
            print(f"\n--- Parallel Runs: {len(final_result['parallel_runs'])} ---")
            for i, run in enumerate(final_result['parallel_runs'], 1):
                print(f"  Agent {i}: {run.get('prediction', 'N/A')[:100]}...")
        else:
            print(f"Prediction: {final_result['prediction']}")
            print(f"\n--- Report ---")
            print(final_result['report'])
        
        if args.verbose:
            print(f"\n--- Full Trajectory ---")
            if use_tts_mode:
                print(json.dumps(final_result['parallel_runs'], indent=2, ensure_ascii=False))
            else:
                print(json.dumps(final_result['trajectory'], indent=2, ensure_ascii=False))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="WebResearcher: Iterative Deep-Research Agent",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Single agent (default, cost-effective)
  python main.py --test_case_limit 1
  
  # Test-Time Scaling (3-5x cost, higher accuracy)
  python main.py --use_tts --num_parallel_agents 3 --test_case_limit 1
  
  # Custom model and tools
  python main.py --model gpt-4o --function_list search PythonInterpreter
        """
    )
    
    # Model configuration
    parser.add_argument("--model", type=str, default="o3-mini",
                        help="LLM model name")
    parser.add_argument("--temperature", type=float, default=0.6,
                        help="Sampling temperature")
    parser.add_argument("--top_p", type=float, default=0.95,
                        help="Nucleus sampling threshold")
    parser.add_argument("--presence_penalty", type=float, default=1.1,
                        help="Presence penalty")
    parser.add_argument("--max_input_tokens", type=int, default=32000,
                        help="Maximum input tokens")
    parser.add_argument("--model_thinking_type", type=str, default='enabled',
                        choices=['enabled', 'disabled', 'auto'],
                        help="Model thinking mode")
    
    # Agent configuration
    parser.add_argument("--function_list", type=str, nargs='*',
                        default=["search", "google_scholar", "PythonInterpreter"],
                        help="List of tools to enable")
    
    # Test-Time Scaling (TTS)
    parser.add_argument("--use_tts", action="store_true",
                        help="Enable Test-Time Scaling (3-5x cost, higher accuracy)")
    parser.add_argument("--num_parallel_agents", type=int, default=3,
                        help="Number of parallel agents for TTS mode")
    
    # Execution
    parser.add_argument("--test_case_limit", type=int, default=3,
                        help="Number of test cases to run (0 for all)")
    parser.add_argument("--verbose", action="store_true",
                        help="Print full trajectory logs")
    
    args = parser.parse_args()
    
    # Print configuration
    logger.info("üöÄ Starting WebResearcher")
    logger.info(f"   Model: {args.model}")
    logger.info(f"   Mode: {'TTS (Test-Time Scaling)' if args.use_tts else 'Single Agent'}")
    logger.info(f"   Tools: {', '.join(args.function_list)}")
    
    asyncio.run(main(args))
